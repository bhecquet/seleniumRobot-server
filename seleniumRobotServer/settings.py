"""
Django settings for seleniumRobotServer project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/

/!\ THIS FILE aims at being processed by a tool which will replace all variables ('${var}')
    by their values
"""



import os
from django_auth_ldap.config import LDAPSearch, LDAPGroupQuery,\
    ActiveDirectoryGroupType
    
from seleniumRobotServer.settings_base import *
import ldap

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '${django.secret.key}'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

TIME_ZONE = '${timezone}'

# allow files up to 10 MB to be uploaded
FILE_UPLOAD_MAX_MEMORY_SIZE = 10000000


AUTHENTICATION_BACKENDS = (
    "${auth.backends}",
    'django.contrib.auth.backends.ModelBackend',
#     'seleniumRobotServer.openidbackend.NameOIDCAB',
#     'mozilla_django_oidc.auth.OIDCAuthenticationBackend'
    )

if ("${database.host}"): 
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': '${database.name}',
            'USER': '${database.user}',
            'PASSWORD': '${database.password}',
            'HOST': '${database.host}',
            'PORT': '${database.port}',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': "${database.name}",
#             'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        } 
    }



MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join('${data.dir}', 'media')

# whether to enable security of API / GUI
SECURITY_WEB_ENABLED = "${security.web}"
SECURITY_API_ENABLED = "${security.api}"

if (SECURITY_API_ENABLED):
    REST_FRAMEWORK = {
        # Use Django's standard `django.contrib.auth` permissions,
        'DEFAULT_PERMISSION_CLASSES': [
            'seleniumRobotServer.permissions.permissions.GenericPermissions'
        ],
        'DEFAULT_AUTHENTICATION_CLASSES': [
            'rest_framework.authentication.TokenAuthentication',   # for API calls
            'rest_framework.authentication.SessionAuthentication', # for Ajax requests from GUI
        ]
    }
else:
    REST_FRAMEWORK = {
        # allow read-only access for unauthenticated users.
        'DEFAULT_PERMISSION_CLASSES': [
            'rest_framework.permissions.AllowAny'
        ]
    }
    
FIELD_DETECTOR_ENABLED = '${field.detector.enabled}'
DRAMATIQ_BROKER['OPTIONS']['url'] = '${redis.url}/0'
DRAMATIQ_RESULT_BACKEND['BACKEND_OPTIONS']['url'] = '${redis.url}'

# -------- Application specific flags ------------
# whether we restrict the view/change/delete/add to the user, in admin view to only applications he has rights for (issue #28)
RESTRICT_ACCESS_TO_APPLICATION_IN_ADMIN = True

# -------- OpenID Authentication -----------------
OIDC_RP_CLIENT_ID = '${openid.clientid}'
OIDC_RP_CLIENT_SECRET = '${openid.secret}'
OIDC_OP_AUTHORIZATION_ENDPOINT = "${openid.authorization}"
OIDC_OP_TOKEN_ENDPOINT = "${openid.token}"
OIDC_OP_USER_ENDPOINT = "${openid.userinfo}"
OIDC_RP_SIGN_ALGO = "RS256"
OIDC_RP_SCOPES = "sub" # may not be necessary if email is provided
OIDC_USE_NONCE = False # may be set to True if needed
OIDC_RP_IDP_KEYFILE = '${openid.keyfile}' # pem file to read public key from. Only necessary for RS256 algo
if os.path.isfile(OIDC_RP_IDP_KEYFILE):
    with(open(OIDC_RP_IDP_KEYFILE)) as keyfile:
        OIDC_RP_IDP_SIGN_KEY = keyfile.read()

OIDC_OP_JWKS_ENDPOINT = "${openid.jwks}" # either set this or OIDC_RP_IDP_KEYFILE, not both


# to use in conjunction with 'NameOIDCAB' backend. Set at least one group for each variable as this is the only way to have administrator (except local database)
OIDC_IS_STAFF_GROUP_NAMES = ['${openid.groups.isstaff}']
OIDC_IS_SUPERUSER_GROUP_NAMES = ['${openid.groups.issuperuser}']
 
# -------- LDAP Authentication -------------------
AUTH_LDAP_GLOBAL_OPTIONS = {
    ldap.OPT_REFERRALS: 0
}

# first LDAP server configuration
AUTH_LDAP_1_SERVER_URI = "${ldap.url}"
AUTH_LDAP_1_BIND_DN = '${ldap.user}'
AUTH_LDAP_1_BIND_PASSWORD = '${ldap.password}'
AUTH_LDAP_1_USER_SEARCH = LDAPSearch("${ldap.base}", ldap.SCOPE_SUBTREE, "(${ldap.object.class}=%(user)s)")
AUTH_LDAP_1_GROUP_SEARCH = LDAPSearch("${ldap.base}", ldap.SCOPE_SUBTREE, "(objectClass=group)")
AUTH_LDAP_1_GROUP_TYPE = ActiveDirectoryGroupType()
AUTH_LDAP_1_USER_ATTR_MAP = {"first_name": "givenName", "last_name": "sn"}
AUTH_LDAP_1_USER_FLAGS_BY_GROUP = {
# authenticated users will be active
#     "is_active": (LDAPGroupQuery("${ldap.group.admin}") |
#                   LDAPGroupQuery("${ldap.group.edit}")),
    "is_staff": "${ldap.group.edit}",
    "is_superuser": "${ldap.group.admin}"
}

# second LDAP server configuration (uncomment "seleniumRobotServer.ldapbackends.LDAPBackend2" in AUTHENTICATION_BACKENDS to use it)
AUTH_LDAP_2_SERVER_URI = "${ldap.2.url}"
AUTH_LDAP_2_BIND_DN = '${ldap.2.user}'
AUTH_LDAP_2_BIND_PASSWORD = '${ldap.2.password}'
AUTH_LDAP_2_USER_SEARCH = LDAPSearch("${ldap.2.base}", ldap.SCOPE_SUBTREE, "(${ldap.2.object.class}=%(user)s)")
AUTH_LDAP_2_GROUP_SEARCH = LDAPSearch("${ldap.2.base}", ldap.SCOPE_SUBTREE, "(objectClass=group)")
AUTH_LDAP_2_GROUP_TYPE = ActiveDirectoryGroupType()
AUTH_LDAP_2_USER_ATTR_MAP = {"first_name": "givenName", "last_name": "sn"}
AUTH_LDAP_2_USER_FLAGS_BY_GROUP = {
# authenticated users will be active
#     "is_active": (LDAPGroupQuery("${ldap.2.group.admin}") |
#                   LDAPGroupQuery("${ldap.2.group.edit}")),
    "is_staff": "${ldap.2.group.edit}",
    "is_superuser": "${ldap.2.group.admin}"
}
                                   
# third LDAP server configuration (uncomment "seleniumRobotServer.ldapbackends.LDAPBackend3" in AUTHENTICATION_BACKENDS to use it)
AUTH_LDAP_3_SERVER_URI = "${ldap.3.url}"
AUTH_LDAP_3_BIND_DN = '${ldap.3.user}'
AUTH_LDAP_3_BIND_PASSWORD = '${ldap.3.password}'
AUTH_LDAP_3_USER_SEARCH = LDAPSearch("${ldap.3.base}", ldap.SCOPE_SUBTREE, "(${ldap.3.object.class}=%(user)s)")
AUTH_LDAP_3_GROUP_SEARCH = LDAPSearch("${ldap.3.base}", ldap.SCOPE_SUBTREE, "(objectClass=group)")
AUTH_LDAP_3_GROUP_TYPE = ActiveDirectoryGroupType()
AUTH_LDAP_3_USER_ATTR_MAP = {"first_name": "givenName", "last_name": "sn"}
AUTH_LDAP_3_USER_FLAGS_BY_GROUP = {
# authenticated users will be active
#     "is_active": (LDAPGroupQuery("${ldap.3.group.admin}") |
#                   LDAPGroupQuery("${ldap.3.group.edit}")),
    "is_staff": "${ldap.3.group.edit}",
    "is_superuser": "${ldap.3.group.admin}"
}